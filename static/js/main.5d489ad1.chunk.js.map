{"version":3,"sources":["App.jsx","firebase.js","serviceWorker.js","index.js"],"names":["playerX","shiftX","document","documentElement","clientWidth","playerY","shiftY","clientHeight","intersectRect","r1","r2","left","right","top","bottom","Player","x","y","angle","Object","C_Projects_UniversalProjects_JSON_Interpreter_data_handler_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","this","radius","shiftAngle","v","attacking","attackCounter","controller","forward","back","drawX","drawY","mouse","Math","atan","PI","direction","_this","atAngle","cos","sin","updateAngle","ctx","move","fillStyle","beginPath","arc","fill","stroke","closePath","attackDistance","abs","Server","data","theme","hostname","area","version","uptime","width","height","health","concat","fillRect","rect","font","fillText","Canvas","_this2","C_Projects_UniversalProjects_JSON_Interpreter_data_handler_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Projects_UniversalProjects_JSON_Interpreter_data_handler_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","updateCanvas","bind","C_Projects_UniversalProjects_JSON_Interpreter_data_handler_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","refs","canvas","getContext","canvasRect","getBoundingClientRect","player","servers","numOfAddedServers","props","sort","a","b","currentArea","length","areaShift","healing","bgColorIndex","colors","dark","light","i","xWithoutShift","floor","obj","_this3","clearRect","minServer","minDistance","Number","MAX_SAFE_INTEGER","window","innerWidth","innerHeight","_arr","values","_i","server","getPunchingHand","getRect","destroyedServer","draw","sqrt","pow","makeRandColor","num","random","updateBgColor","requestAnimationFrame","style","backgroundColor","_this4","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","ref","onMouseMove","e","clientX","clientY","id","transition","Component","App","_this5","checkOrientation","createGraphData","isNaN","parseInt","state","columnDefs","headerName","field","checkboxSelection","editable","orientation","graph_revision","authenticated","curUser","accessCode","fieldEditerIsOpen","fieldRemoverIsOpen","dataEditorIsOpen","dataRemoverIsOpen","selectorIsOpen","shareCodeIsOpen","joinCodeIsOpen","selectorTab","cachedExpression","dataIndex","layout","title","plot_bgcolor","paper_bgcolor","family","color","addEventListener","activeElement","tagName","keyCode","canvasComponent","attack","removeEventListener","setState","xs","ys","ys2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","includes","indexOf","push","err","return","j","tempX","splice","tempY","tempY2","type","name","marker","s","dataCopy","C_Projects_UniversalProjects_JSON_Interpreter_data_handler_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","getIndexByHostname","deleteServer","_this6","navigator","userAgent","match","className","ag_grid_react__WEBPACK_IMPORTED_MODULE_10__","enableSorting","enableFilter","rowSelection","rowDragManaged","rowData","onGridReady","params","gridApi","api","columnApi","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_9__","expand","cursor","fontSize","userSelect","navbar","nav","inNavbar","caret","onClick","selectedData","getSelectedRows","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","d","borderRight","deselectAll","disabled","firebase","database","once","snapshot","val","recreateServers","alert","uid","snap","set","fileSelector","setAttribute","onchange","event","fileReader","FileReader","onload","JSON","parse","target","result","readAsText","files","body","appendChild","click","removeChild","fileContents","csv","replace","csvData","jsonData","keys","toLowerCase","readAsBinaryString","blob","Blob","stringify","url","URL","createObjectURL","display","exportDataAsCsv","fileName","plot","el","getElementsByClassName","getElementById","toDataURL","refreshCells","marginRight","overflow","textAlign","margin","padding","provider","auth","GoogleAuthProvider","signInWithPopup","then","user","on","r","toString","substring","catch","src","photoURL","alt","borderRadius","displayName","email","signOut","react_toggle_component__WEBPACK_IMPORTED_MODULE_14___default","checked","onToggle","layoutCopy","C_Projects_UniversalProjects_JSON_Interpreter_data_handler_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","position","animateRows","enableCellChangeFlash","getRowNodeId","onRowSelected","shouldRun","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","onCellEditingStopped","updateData","react_plotly_js__WEBPACK_IMPORTED_MODULE_16___default","revision","responsive","config","scrollZoom","displaylogo","size","isOpen","onSubmit","preventDefault","addServer","defaultValue","hostnames","split","key","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","arr","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","join","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","forEachNode","node","setSelected","expression","replacedExpression","eval","tabs","activeTab","tabId","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","fontWeight","fontStyle","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","code","firebase_app__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","firebase_app__WEBPACK_IMPORTED_MODULE_0___default","n","_firebaseConfig_json__WEBPACK_IMPORTED_MODULE_3__","initializeApp","Boolean","location","ReactDOM","render","react_default","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d489ad1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { TabContent, TabPane, Navbar, NavbarBrand, Nav, NavItem, NavLink, DropdownToggle, UncontrolledDropdown, DropdownMenu, DropdownItem, Modal, ModalBody, ModalHeader, ModalFooter, Form, FormGroup, FormText, Button, Label, Input } from 'reactstrap';\r\n\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-dark.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\n\r\nimport Toggle from \"react-toggle-component\"\r\nimport \"react-toggle-component/styles.css\"\r\n\r\nimport Plot from 'react-plotly.js';\r\n\r\nimport csv from 'csv';\r\n\r\nimport data from './data/data.json'\r\n\r\nimport firebase from './firebase.js'\r\n\r\nlet playerX = 0;\r\nfunction shiftX() {\r\n    return 0.2*document.documentElement.clientWidth - playerX;\r\n}\r\n\r\nlet playerY = 0;\r\nfunction shiftY() {\r\n    return .25*document.documentElement.clientHeight - playerY;\r\n}\r\n\r\nfunction intersectRect(r1, r2) {\r\n    return !(r2.left > r1.right || \r\n             r2.right < r1.left || \r\n             r2.top > r1.bottom ||\r\n             r2.bottom < r1.top);\r\n  }\r\n\r\nclass Player {\r\n    \r\n    constructor(x, y, angle) {\r\n        this.x = x;\r\n        this.y = y;\r\n        playerX = this.x;\r\n        playerY = this.y;\r\n        this.angle = angle;\r\n        this.radius = 20;\r\n        this.shiftAngle = 40;\r\n        this.v = 6;\r\n        this.attacking = 0;\r\n        this.attackCounter = 0;\r\n        this.controller = {\r\n            left: false,\r\n            right: false,\r\n            forward: false,\r\n            back: false\r\n        }\r\n        this.drawX = 0.2*document.documentElement.clientWidth;\r\n        this.drawY = 0.25*document.documentElement.clientHeight;\r\n    }\r\n\r\n    updateAngle(mouse) {\r\n        this.mouse = mouse;\r\n        if(!mouse)\r\n            this.angle = 0;\r\n        else if(mouse.x === this.drawX)\r\n            this.angle = 0;\r\n        else\r\n            this.angle = (mouse.x - this.drawX > 0)? Math.atan((mouse.y - this.drawY)/(mouse.x - this.drawX))*180.0/Math.PI: Math.atan((mouse.y - this.drawY)/(mouse.x - this.drawX))*180.0/Math.PI + 180;\r\n    }\r\n\r\n    move(direction) {\r\n        let atAngle = (angle) => {\r\n            this.x += this.v*Math.cos(angle*Math.PI/180.0);\r\n            this.y += this.v*Math.sin(angle*Math.PI/180.0);\r\n        };\r\n        switch(direction)\r\n        {\r\n            case \"forward\":\r\n                atAngle(this.angle);\r\n                break;\r\n            case \"back\":\r\n                atAngle(this.angle+180);\r\n                break;\r\n            case \"left\":\r\n                atAngle(this.angle-90);\r\n                break;\r\n            case \"right\":\r\n                atAngle(this.angle+90);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        playerX = this.x;\r\n        playerY = this.y;\r\n        this.updateAngle(this.mouse);\r\n    }\r\n\r\n    attack() {\r\n        this.attacking = 14;\r\n        this.attackCounter++;\r\n    }\r\n\r\n    draw(ctx) {\r\n        \r\n        if(this.controller.left)\r\n            this.move(\"left\");\r\n        if(this.controller.right)\r\n            this.move(\"right\");\r\n        if(this.controller.forward)\r\n            this.move(\"forward\");\r\n        if(this.controller.back)\r\n            this.move(\"back\");        \r\n\r\n        ctx.fillStyle = \"#ffd9b3\";\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.drawX, this.drawY, this.radius, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n\r\n        let attackDistance = 7 - Math.abs(this.attacking-7);\r\n\r\n        if(this.attacking && this.attackCounter%2===0)\r\n            this.radius*=1+(attackDistance/20);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.drawX+this.radius*Math.cos((this.angle+this.shiftAngle)*Math.PI/180.0), this.drawY+this.radius*Math.sin((this.angle+this.shiftAngle)*Math.PI/180.0), this.radius/3.5, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n\r\n        if(this.attacking && this.attackCounter%2===1)\r\n            this.radius*=1+(attackDistance/20);\r\n        if(this.attacking && this.attackCounter%2===0)\r\n            this.radius/=1+(attackDistance/20);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.drawX+this.radius*Math.cos((this.angle-this.shiftAngle)*Math.PI/180.0), this.drawY+this.radius*Math.sin((this.angle-this.shiftAngle)*Math.PI/180.0), this.radius/3.5, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n\r\n        if(this.attacking && this.attackCounter%2===1)\r\n            this.radius/=1+(attackDistance/20);\r\n\r\n        if(this.attacking)\r\n            this.attacking-=2;\r\n    }\r\n\r\n    getPunchingHand() {\r\n        let attackDistance = 7 - Math.abs(this.attacking-7);\r\n        if(!this.attacking)\r\n            return null;\r\n        if(this.attackCounter%2 === 0)\r\n            return {\r\n                left: this.x + (1+(attackDistance/20))*this.radius*Math.cos((this.angle+this.shiftAngle)*Math.PI/180.0) - (1+(attackDistance/20))*this.radius,\r\n                right: this.x + (1+(attackDistance/20))*this.radius*Math.cos((this.angle+this.shiftAngle)*Math.PI/180.0) + (1+(attackDistance/20))*this.radius,\r\n                top: this.y + (1+(attackDistance/20))*this.radius*Math.sin((this.angle+this.shiftAngle)*Math.PI/180.0) - (1+(attackDistance/20))*this.radius,\r\n                bottom: this.y + (1+(attackDistance/20))*this.radius*Math.sin((this.angle+this.shiftAngle)*Math.PI/180.0) + (1+(attackDistance/20))*this.radius\r\n            };\r\n        else\r\n            return {\r\n                left: this.x + (1+(attackDistance/20))*this.radius*Math.cos((this.angle-this.shiftAngle)*Math.PI/180.0) - (1+(attackDistance/20))*this.radius,\r\n                right: this.x + (1+(attackDistance/20))*this.radius*Math.cos((this.angle-this.shiftAngle)*Math.PI/180.0) + (1+(attackDistance/20))*this.radius,\r\n                top: this.y + (1+(attackDistance/20))*this.radius*Math.sin((this.angle-this.shiftAngle)*Math.PI/180.0) - (1+(attackDistance/20))*this.radius,\r\n                bottom: this.y + (1+(attackDistance/20))*this.radius*Math.sin((this.angle-this.shiftAngle)*Math.PI/180.0) + (1+(attackDistance/20))*this.radius\r\n            }\r\n    }\r\n\r\n}\r\n\r\nclass Server {\r\n\r\n    constructor(data, x, y, theme) {\r\n        if(data && data.hostname)\r\n            this.hostname = data.hostname;\r\n        if(data && data.area)\r\n            this.area = data.area;\r\n        if(data && data.version)\r\n            this.version = data.version;\r\n        if(data && data.uptime)\r\n            this.uptime = data.uptime;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 50;\r\n        this.height = 50;\r\n        this.health = 100;\r\n        this.theme = theme;\r\n    }\r\n\r\n    getRect() {\r\n        return {\r\n            left: this.x,\r\n            top: this.y,\r\n            right: this.x+this.width,\r\n            bottom: this.y+this.height\r\n        };\r\n    }\r\n\r\n    draw(ctx) {\r\n        if(this.health > 0)\r\n        {\r\n            ctx.fillStyle = `rgb(${((this.theme === \"light\")? 255: 200) - this.health},${(this.theme === \"light\")? 155: 100},${(this.theme === \"light\")? 155: 100})`;\r\n            ctx.fillRect(this.x+shiftX(), this.y+shiftY(), this.width, this.height);\r\n            ctx.rect(this.x+shiftX(), this.y+shiftY(), this.width, this.height);\r\n            ctx.fillStyle=\"black\";\r\n            ctx.font = \"7px Arial\";\r\n            ctx.fillText(this.hostname, this.x+shiftX()+1,this.y+shiftY()+10);\r\n            ctx.fillText(this.area, this.x+shiftX()+1,this.y+shiftY()+21);\r\n            ctx.fillText(this.version, this.x+shiftX()+1,this.y+shiftY()+31);\r\n            ctx.fillText(this.uptime, this.x+shiftX()+1,this.y+shiftY()+41);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass Canvas extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.updateCanvas = this.updateCanvas.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.ctx = this.refs.canvas.getContext('2d');\r\n        this.canvasRect = this.refs.canvas.getBoundingClientRect();\r\n        this.player = new Player(150, 150, 0);\r\n        this.servers = {};\r\n        this.numOfAddedServers = 0;\r\n        let data = (this.props.data)? this.props.data.sort((a,b) => (a.area > b.area) ? 1 : ((b.area > a.area) ? -1 : 0)): []; \r\n        let currentArea = (data && data.length > 0)? data[0].area: \"area\";\r\n        this.currentArea = currentArea;\r\n        let areaShift = 0;\r\n        this.healing = false;\r\n        this.bgColorIndex = 0;\r\n\r\n        this.colors = {\r\n            dark: ['#b30000', '#262673', '#000000', '#267326', '#666600', '#800080', '#33334d' ,'#004d4d'],\r\n            light: ['#ffcccc', '#8c8cd9', '#ffffff', '#b3e6b3', '#ffff33', '#ff4dff', '#c2c2d6', '#99ffff']\r\n        }\r\n\r\n        /*eslint-disable */\r\n        for(let i=0; i<data.length; i++) {\r\n            const xWithoutShift = 10+60*Math.floor(i/4);\r\n            if(data[i].area != currentArea)\r\n            {\r\n                areaShift+=100;\r\n                currentArea = data[i].area;\r\n                i--;\r\n                continue;\r\n            }\r\n            this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 10, this.props.theme);\r\n            i++;\r\n            if(i<data.length)\r\n            {\r\n                if(data[i].area != currentArea)\r\n                {\r\n                    areaShift+=150;\r\n                    currentArea = data[i].area;\r\n                    i--;\r\n                    continue;\r\n                }\r\n                this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 70, this.props.theme);\r\n            }\r\n            i++;\r\n            if(i<data.length)\r\n            {\r\n                if(data[i].area != currentArea)\r\n                {\r\n                    areaShift+=150;\r\n                    currentArea = data[i].area;\r\n                    i--;\r\n                    continue;\r\n                }\r\n                this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 130, this.props.theme);\r\n            }\r\n            i++;\r\n            if(i<data.length)\r\n            {\r\n                if(data[i].area != currentArea)\r\n                {\r\n                    areaShift+=150;\r\n                    currentArea = data[i].area;\r\n                    i--;\r\n                    continue;\r\n                }\r\n                this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 190, this.props.theme);\r\n            }\r\n        }\r\n        /*eslint-enable */\r\n        this.mouse = {\r\n            x: this.x+1,\r\n            y: this.y\r\n        };\r\n        this.updateCanvas();\r\n    }\r\n\r\n    recreateServers() {\r\n        this.servers = {};\r\n        if(!this.props.data)\r\n            return;\r\n        this.numOfAddedServers = 0;\r\n        let data = this.props.data.sort((a,b) => (a.area > b.area) ? 1 : ((b.area > a.area) ? -1 : 0)); \r\n        let currentArea = (data && data.length > 0)? data[0].area: \"area\";\r\n        let areaShift = 0;\r\n        /*eslint-disable */\r\n        for(let i=0; i<data.length; i++) {\r\n            const xWithoutShift = 10+60*Math.floor(i/4);\r\n            if(data[i].area != currentArea)\r\n            {\r\n                areaShift+=100;\r\n                currentArea = data[i].area;\r\n                i--;\r\n                continue;\r\n            }\r\n            this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 10, this.props.theme);\r\n            i++;\r\n            if(i<data.length)\r\n            {\r\n                if(data[i].area != currentArea)\r\n                {\r\n                    areaShift+=150;\r\n                    currentArea = data[i].area;\r\n                    i--;\r\n                    continue;\r\n                }\r\n                this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 70, this.props.theme);\r\n            }\r\n            i++;\r\n            if(i<data.length)\r\n            {\r\n                if(data[i].area != currentArea)\r\n                {\r\n                    areaShift+=150;\r\n                    currentArea = data[i].area;\r\n                    i--;\r\n                    continue;\r\n                }\r\n                this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 130, this.props.theme);\r\n            }\r\n            i++;\r\n            if(i<data.length)\r\n            {\r\n                if(data[i].area != currentArea)\r\n                {\r\n                    areaShift+=150;\r\n                    currentArea = data[i].area;\r\n                    i--;\r\n                    continue;\r\n                }\r\n                this.servers[data[i].hostname] = new Server(data[i], xWithoutShift + areaShift, 190, this.props.theme);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateData(obj) \r\n    {\r\n        if(this.servers[obj.hostname])\r\n        {\r\n            this.servers[obj.hostname].area = obj.area;\r\n            this.servers[obj.hostname].version = obj.version;\r\n            this.servers[obj.hostname].uptime = obj.uptime;\r\n        }\r\n    }\r\n\r\n    deleteServer(hostname)\r\n    {\r\n        if(this.servers[hostname])\r\n            delete this.servers[hostname];\r\n    }\r\n\r\n    addServer(obj)\r\n    {\r\n        this.servers[obj.hostname] = new Server(obj, 10+60*this.numOfAddedServers, 250, this.props.theme);\r\n        this.numOfAddedServers++;\r\n    }\r\n\r\n    updateCanvas() {\r\n        this.ctx.clearRect(0, 0, this.canvasRect.width, this.canvasRect.height);\r\n        let minServer = -1;\r\n        let minDistance = Number.MAX_SAFE_INTEGER;\r\n        const window = {\r\n            left: this.player.x - this.refs.canvas.innerWidth/2.0,\r\n            right: this.player.x + this.refs.canvas.innerWidth/2.0,\r\n            top: this.player.y - this.refs.canvas.innerHeight/2.0,\r\n            bottom: this.player.y + this.refs.canvas.innerHeight/2.0,\r\n        }\r\n        for(let server of Object.values(this.servers))\r\n        {\r\n            if(server.theme !== this.props.theme)\r\n                server.theme = this.props.theme;\r\n            if(this.player.attacking)\r\n            {\r\n                if(intersectRect(this.player.getPunchingHand(), server.getRect()))\r\n                    server.health-=2;\r\n            }\r\n            if(server.health < 0)\r\n            {\r\n                this.props.destroyedServer(server);\r\n            }\r\n            if(intersectRect(window, server.getRect()))\r\n                server.draw(this.ctx);\r\n            if(Math.sqrt(Math.pow(server.x + server.width/2 - this.player.x, 2) + Math.pow(server.y + server.height/2 - this.player.y, 2)) < minDistance)\r\n            {\r\n                minServer = server;\r\n                minDistance = Math.sqrt(Math.pow(server.x + server.width/2 - this.player.x, 2) + Math.pow(server.y + server.height/2 - this.player.y, 2));\r\n            }\r\n        }\r\n        if(this.healing && minServer.health < 96)\r\n            minServer.health+=5;\r\n        if(this.healing && minServer.health < 100 && minServer.health > 95)\r\n            minServer.health++;\r\n\r\n        if(!this.healing && minServer.health < 50)\r\n        {\r\n            this.ctx.fillStyle=(this.props.theme === \"light\")? \"black\" : \"white\";\r\n            this.ctx.font = \"20px Arial\";\r\n            this.ctx.fillText(\"FIX NEAREST SERVER WITH F\", 10, 30);\r\n        }\r\n\r\n         // eslint-disable-next-line\r\n        if(minServer.area != this.currentArea)\r\n        {\r\n            this.currentArea = minServer.area;\r\n            let makeRandColor = () => {\r\n                let num = Math.floor(Math.random()*8);\r\n                if(num === this.bgColorIndex)\r\n                    return makeRandColor();\r\n                else {\r\n                    this.bgColorIndex = num;\r\n                    this.updateBgColor();\r\n                }\r\n            }\r\n            makeRandColor();\r\n        }\r\n\r\n        this.player.draw(this.ctx);\r\n        requestAnimationFrame(this.updateCanvas);\r\n    }\r\n\r\n    updateBgColor() {\r\n        this.refs.canvas.style.backgroundColor = this.colors[this.props.theme][this.bgColorIndex];\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <canvas \r\n                ref=\"canvas\"\r\n                onMouseMove={\r\n                    e => {\r\n                        this.mouse = {\r\n                            x: e.clientX - this.canvasRect.x,\r\n                            y: e.clientY - this.canvasRect.y\r\n                        }\r\n                        this.player.updateAngle(this.mouse);\r\n                    }\r\n                }\r\n                width={this.props.width}\r\n                height={this.props.height}\r\n                id=\"canvas\"\r\n                style={{  \r\n                    backgroundColor: this.props.backgroundColor,\r\n                    transition: \"background-color 2s\"\r\n                }}/>\r\n        );\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.checkOrientation = this.checkOrientation.bind(this);\r\n        this.createGraphData = this.createGraphData.bind(this);\r\n        this.destroyedServer = this.destroyedServer.bind(this);\r\n\r\n        for(let i in data)\r\n        {\r\n            data[i].uptime = (data[i].uptime && !isNaN(parseInt(data[i].uptime)))? parseInt(data[i].uptime) : 0;\r\n        }\r\n\r\n        this.state = {\r\n            columnDefs: [\r\n                {headerName: \"Hostname\", field: \"hostname\", checkboxSelection: true},\r\n                {headerName: \"Area\", field: \"area\", editable: true},\r\n                {headerName: \"Version\", field: \"version\", editable: true},\r\n                {headerName: \"Uptime\", field: \"uptime\", editable: true}\r\n            ],\r\n            data: data,\r\n            orientation: \"h\",\r\n            graph_revision: 0,\r\n            authenticated: 0,\r\n            curUser: null,\r\n            accessCode: \"\",\r\n            fieldEditerIsOpen: false,\r\n            fieldRemoverIsOpen: false,\r\n            dataEditorIsOpen: false,\r\n            dataRemoverIsOpen: false,\r\n            selectorIsOpen: false,\r\n            shareCodeIsOpen: false,\r\n            joinCodeIsOpen: false,\r\n            selectorTab: \"hostname\",\r\n            cachedExpression: \"\",\r\n            dataIndex: -1,\r\n            theme: \"dark\",\r\n            layout: {title: 'Details Depending on Area', plot_bgcolor: '#222222', paper_bgcolor: '#222222', font: { family: 'Courier New, monospace', color: \"#ffffff\"} }\r\n        };\r\n\r\n        /*eslint-disable */\r\n        window.addEventListener(\"keydown\", e => {\r\n            if(document.activeElement.tagName === \"BODY\")\r\n            {\r\n                switch(e.keyCode)\r\n                {\r\n                    case 37:\r\n                    case 65:\r\n                        this.refs.canvasComponent.player.controller.left = true;\r\n                        break;\r\n                    case 38:\r\n                    case 87:\r\n                        this.refs.canvasComponent.player.controller.forward = true;\r\n                        break;\r\n                    case 39:\r\n                    case 68:\r\n                        this.refs.canvasComponent.player.controller.right = true;\r\n                        break;\r\n                    case 40:\r\n                    case 83:\r\n                        this.refs.canvasComponent.player.controller.back = true;\r\n                        break;\r\n                    case 70:\r\n                        this.refs.canvasComponent.healing = true;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n\r\n        window.addEventListener(\"keyup\", e => {\r\n            if(document.activeElement.tagName === \"BODY\")\r\n            {\r\n                switch(e.keyCode)\r\n                {\r\n                    case 37:\r\n                    case 65:\r\n                        this.refs.canvasComponent.player.controller.left = false;\r\n                        break;\r\n                    case 38:\r\n                    case 87:\r\n                        this.refs.canvasComponent.player.controller.forward = false;\r\n                        break;\r\n                    case 39:\r\n                    case 68:\r\n                        this.refs.canvasComponent.player.controller.right = false;\r\n                        break;\r\n                    case 40:\r\n                    case 83:\r\n                        this.refs.canvasComponent.player.controller.back = false;\r\n                        break;\r\n                    case 32:\r\n                        this.refs.canvasComponent.player.controller.left = false;\r\n                        this.refs.canvasComponent.player.controller.right = false;\r\n                        this.refs.canvasComponent.player.controller.forward = false;\r\n                        this.refs.canvasComponent.player.controller.back = false;\r\n                        this.refs.canvasComponent.healing = false;\r\n                        break;\r\n                    case 70:\r\n                        this.refs.canvasComponent.healing = false;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n        /*eslint-enable */\r\n        window.addEventListener(\"click\", e => {\r\n            if(document.activeElement.tagName === \"BODY\")\r\n                this.refs.canvasComponent.player.attack();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.checkOrientation();\r\n        window.addEventListener(\"resize\", this.checkOrientation);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.checkOrientation);\r\n    }\r\n\r\n    checkOrientation() {\r\n        if(window.innerHeight > window.innerWidth)\r\n            this.setState({orientation: \"v\"});\r\n        else\r\n            this.setState({orientation: \"h\"});\r\n    }\r\n\r\n    getIndexByHostname(hostname) {\r\n        if(!this.state.data) return -1;\r\n        for(let i = 0; i < this.state.data.length; i++)\r\n            if(hostname === this.state.data[i].hostname)\r\n                return i;\r\n        return -1;\r\n    }\r\n\r\n    createGraphData(data) {\r\n        if(!data) return null;\r\n        let xs = [];\r\n        let ys = [];\r\n        let ys2 = [];\r\n        for(let server of data)\r\n        {\r\n            if(server.area)\r\n                if(!xs.includes(server.area))\r\n                {\r\n                    xs.push(server.area);\r\n                    ys[xs.indexOf(server.area)] = 1;\r\n                    ys2[xs.indexOf(server.area)] = (isNaN(parseInt(server.uptime)))? 0 : parseInt(server.uptime);\r\n                }\r\n                else\r\n                {\r\n                    ys2[xs.indexOf(server.area)] += (isNaN(parseInt(server.uptime)))? 0 : parseInt(server.uptime);\r\n                    ys[xs.indexOf(server.area)]++;\r\n                }\r\n        }\r\n        for(let i = 0; i < ys.length; i++)\r\n        {\r\n            ys2[i] /= ys[i];\r\n        }\r\n        for(let i = 1; i < ys.length; i++)\r\n            for(let j = 0; j < i; j++) {\r\n                if(ys[i] > ys[j]) {\r\n                    let tempX = xs.splice(i, 1)[0];\r\n                    let tempY = ys.splice(i, 1)[0];\r\n                    let tempY2 = ys2.splice(i, 1)[0];\r\n                    xs.splice(j,0,tempX);\r\n                    ys.splice(j,0,tempY);\r\n                    ys2.splice(j,0,tempY2);\r\n                }\r\n            }\r\n        return [{type:\"bar\", x: xs, y: ys2, name: \"Average Uptime\", marker:{color:\"blue\"}},\r\n                {type:\"bar\", x: xs, y: ys, name: \"Count\", marker:{color:\"red\"}}];\r\n    }\r\n\r\n    destroyedServer(s) {\r\n        let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n        let hostname = s.hostname;\r\n        if(this.getIndexByHostname(hostname) >= 0)\r\n        {\r\n            dataCopy.splice(this.getIndexByHostname(hostname), 1);\r\n            this.refs.canvasComponent.deleteServer(hostname);\r\n        }\r\n        this.setState({ data: dataCopy, graph_revision: this.state.graph_revision + 1 });\r\n    }\r\n\r\n    render() {\r\n        return (this.state.orientation === \"h\" && !navigator.userAgent.match(/iphone|android|blackberry/ig))? (\r\n            <>\r\n                <Navbar color={this.state.theme} light={this.state.theme === \"light\"} dark={this.state.theme === \"dark\"} expand>\r\n                    <NavbarBrand style={{ cursor: \"default\", fontSize: \"30px\", userSelect: \"none\", color: \"red\" }}>Server Data</NavbarBrand>\r\n                    <Nav className=\"ml-auto\" navbar\r\n                        style={{\r\n                            fontSize: \"15px\",\r\n                            userSelect: \"none\"\r\n                        }}\r\n                        >\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>Field</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ fieldEditerIsOpen: true });\r\n                                }}>\r\n                                    Edit\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ fieldRemoverIsOpen: true });\r\n                                }}>\r\n                                    Remove\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>Data</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ dataEditorIsOpen: true, dataIndex: -1 });\r\n                                }}>\r\n                                    New Server\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ dataRemoverIsOpen: true });\r\n                                }}>\r\n                                    Remove Server\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ dataEditorIsOpen: true });\r\n                                }}>\r\n                                    Edit Selected\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n                                    let selectedData = this.gridApi.getSelectedRows();\r\n\r\n                                    for(let d of selectedData)\r\n                                    {\r\n                                        this.refs.canvasComponent.deleteServer(d.hostname);\r\n                                        dataCopy.splice(dataCopy.indexOf(d), 1);\r\n                                    }\r\n\r\n                                    this.setState({ data: dataCopy });\r\n                                }}>\r\n                                    Remove Selected\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <UncontrolledDropdown nav inNavbar style={{ borderRight: \"1px solid red\" }}>\r\n                            <DropdownToggle nav caret>Select</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                        this.setState({ selectorIsOpen: true });\r\n                                    }}>\r\n                                    Open Selector\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.gridApi.deselectAll();\r\n                                }}>\r\n                                    Deselect All\r\n                                </DropdownItem>\r\n                                <DropdownItem disabled>\r\n                                    {\r\n                                        (() => {\r\n                                            if(this.gridApi)\r\n                                                return this.gridApi.getSelectedRows().length+\" Rows Selected\";\r\n                                            return \"0 Rows Selected\"\r\n                                        })()\r\n                                    }\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" onClick={() => {\r\n                                if(this.state.authenticated === 1)\r\n                                {\r\n                                    firebase.database().ref('/'+this.state.accessCode).once(\"value\", snapshot => {\r\n                                        this.setState({ data: snapshot.val(), graph_revision: this.state.graph_revision + 1 });\r\n                                        this.refs.canvasComponent.recreateServers();\r\n                                    });\r\n                                }\r\n                                else\r\n                                    alert(\"Sign In To Pull Data\");\r\n                                \r\n                            }}>Pull</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" onClick={() => {\r\n                                if(this.state.authenticated === 1)\r\n                                {\r\n                                    firebase.database().ref(\"/\"+this.state.curUser.uid).once(\"value\", snap => {\r\n                                        firebase.database().ref('/'+snap.val()).set(this.state.data);\r\n                                    });\r\n                                }\r\n                                else\r\n                                    alert(\"Sign In Push Data\");\r\n                            \r\n\r\n                                }}>Push</NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledDropdown nav inNavbar style={{ borderRight: \"1px solid red\" }}>\r\n                            <DropdownToggle nav caret>Share</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                        this.setState({ shareCodeIsOpen: true });\r\n                                    }}>\r\n                                    Share\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.setState({ joinCodeIsOpen: true });\r\n                                }}>\r\n                                    Join \r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>Import</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                    let fileSelector = document.createElement(\"input\");\r\n                                    fileSelector.setAttribute(\"type\", \"file\");\r\n                                    fileSelector.setAttribute(\"accept\", \".json\");\r\n                                    fileSelector.onchange = event => {\r\n                                        let fileReader = new FileReader();\r\n                                        fileReader.onload = e => {\r\n                                            let data = JSON.parse(e.target.result);\r\n                                            for(let i in data)\r\n                                            {\r\n                                                data[i].uptime = (data[i].uptime && !isNaN(parseInt(data[i].uptime)))? parseInt(data[i].uptime) : 0;\r\n                                            }\r\n                                            this.setState({ data: data, graph_revision: this.state.graph_revision + 1 }, () => this.refs.canvasComponent.recreateServers());\r\n                                        }\r\n                                        fileReader.readAsText(fileSelector.files[0]);\r\n                                    };\r\n                                    document.body.appendChild(fileSelector);\r\n                                    fileSelector.click();\r\n                                    document.body.removeChild(fileSelector);\r\n                                }}>\r\n                                    JSON\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    let fileSelector = document.createElement(\"input\");\r\n                                    fileSelector.setAttribute(\"type\", \"file\");\r\n                                    fileSelector.setAttribute(\"accept\", \".csv\");\r\n                                    fileSelector.onchange = event => {\r\n                                        let fileReader = new FileReader();\r\n                                        fileReader.onload = e => {\r\n                                            let fileContents = e.target.result;\r\n                                            csv.parse(fileContents.replace(/\"/g, \"\"), (err, csvData) => {\r\n                                                let jsonData = [];\r\n                                                let keys = [];\r\n                                                for(let i = 0; i < csvData[0].length; i++)\r\n                                                {\r\n                                                    keys.push(csvData[0][i].replace(/[^0-9a-z]/gi, '').toLowerCase());\r\n                                                }\r\n                                                for(let i = 1; i < csvData.length; i++)\r\n                                                {\r\n                                                    let obj = {};\r\n                                                    for(let j = 0; j < keys.length; j++)\r\n                                                    {\r\n                                                        obj[keys[j]] = csvData[i][j]; \r\n                                                    }\r\n                                                    jsonData.push(obj);\r\n                                                }\r\n                                                for(let i in jsonData)\r\n                                                {\r\n                                                    jsonData[i].uptime = (jsonData[i].uptime && !isNaN(parseInt(jsonData[i].uptime)))? parseInt(jsonData[i].uptime) : 0;\r\n                                                }\r\n                                                this.setState({ data: jsonData, graph_revision: this.state.graph_revision + 1 }, () => this.refs.canvasComponent.recreateServers());\r\n                                            });\r\n                                            \r\n                                        }\r\n                                        fileReader.readAsBinaryString(fileSelector.files[0]);\r\n                                    };\r\n                                    document.body.appendChild(fileSelector);\r\n                                    fileSelector.click();\r\n                                    document.body.removeChild(fileSelector);\r\n                                }}>\r\n                                    CSV\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <UncontrolledDropdown nav inNavbar style={{ borderRight: \"1px solid red\" }}>\r\n                            <DropdownToggle nav caret>Export</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"13px\"}}>\r\n                                <DropdownItem onClick={() => {\r\n                                    let e = document.createElement('a');\r\n                                    let blob = new Blob([JSON.stringify(this.state.data)], {type: \"text/json;charset=utf-8\"});\r\n                                    let url = URL.createObjectURL(blob);\r\n                                    e.setAttribute('href', url);\r\n                                    e.setAttribute(\"download\", \"ServerData.json\");\r\n                                    e.style.display = 'none';\r\n                                    document.body.appendChild(e);\r\n                                    e.click();\r\n                                    document.body.removeChild(e);\r\n                                }}>\r\n                                    JSON\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.gridApi.exportDataAsCsv({fileName: \"ServerData.csv\"});\r\n                                }}>\r\n                                    CSV\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    this.refs.plot.el.getElementsByClassName('modebar')[0].getElementsByClassName('modebar-btn')[0].click();\r\n                                }}>\r\n                                    Graph\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => {\r\n                                    let e = document.createElement('a');\r\n                                    let url = document.getElementById('canvas').toDataURL('image/png');\r\n                                    e.setAttribute('href', url);\r\n                                    e.setAttribute(\"download\", \"canvas.png\");\r\n                                    e.style.display = 'none';\r\n                                    document.body.appendChild(e);\r\n                                    e.click();\r\n                                    document.body.removeChild(e);\r\n                                }}>\r\n                                    Canvas\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" style={{ borderRight: \"1px solid red\" }} onClick={() => {\r\n                                this.gridApi.refreshCells();\r\n                                this.refs.canvasComponent.recreateServers();\r\n                                this.setState({ graph_revision: this.state.graph_revision + 1 });\r\n                            }}>Refresh</NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledDropdown nav inNavbar style={{\r\n                            marginRight: 30,\r\n                            width: 75\r\n                        }}>\r\n                            <DropdownToggle nav caret>User</DropdownToggle>\r\n                            <DropdownMenu style={{fontSize: \"15px\", overflow: \"hidden\", width: 160, textAlign: \"center\", margin: 0, padding: 0}}>\r\n                                {\r\n                                    (() => {\r\n                                        if(this.state.authenticated === 0)\r\n                                            return (\r\n                                                <DropdownItem onClick={() => {\r\n                                                        const provider = new firebase.auth.GoogleAuthProvider();\r\n                                                        firebase.auth().signInWithPopup(provider).then(result => {\r\n                                                            this.setState({ curUser: result.user, authenticated: 1 });\r\n                                                            firebase.database().ref(\"/\"+this.state.curUser.uid).once(\"value\", snap => {\r\n                                                                if(!snap.val())\r\n                                                                {\r\n                                                                    let r = Math.random().toString(36).substring(2);\r\n                                                                    firebase.database().ref(\"/\"+this.state.curUser.uid).set(r);\r\n                                                                    firebase.database().ref(\"/\"+r).set(this.state.data);\r\n                                                                    this.setState({ accessCode: r });\r\n                                                                    firebase.database().ref(\"/\"+this.state.curUser.uid).on(\"value\", snap => {\r\n                                                                        this.setState({ accessCode: snap.val() });\r\n                                                                    });\r\n                                                                }\r\n                                                                else\r\n                                                                {\r\n                                                                    firebase.database().ref('/'+snap.val()).once(\"value\", snapshot => {\r\n                                                                        this.setState({ data: snapshot.val(), graph_revision: this.state.graph_revision + 1 });\r\n                                                                        this.refs.canvasComponent.recreateServers();\r\n                                                                    });\r\n                                                                    firebase.database().ref(\"/\"+this.state.curUser.uid).on(\"value\", snap => {\r\n                                                                        this.setState({ accessCode: snap.val() });\r\n                                                                    });\r\n                                                                }\r\n                                                            });\r\n                                                        }).catch(err => {\r\n                                                            \r\n                                                        });\r\n                                                    }}>\r\n                                                    Sign In\r\n                                                </DropdownItem>\r\n                                            );\r\n                                            else \r\n                                                return (\r\n                                                    <>\r\n                                                        <img src={this.state.curUser.photoURL} alt=\"USER\" style={{ \r\n                                                            borderRadius: 100,\r\n                                                            width: 50,\r\n                                                            height: 50,\r\n                                                            display: \"block\",\r\n                                                            margin: \"auto\"\r\n                                                         }} />\r\n                                                        <DropdownItem disabled>\r\n                                                            {this.state.curUser.displayName}\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem disabled>\r\n                                                            {this.state.curUser.email}\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem onClick={() => {\r\n                                                            firebase.auth().signOut();\r\n                                                            this.setState({ curUser: null, authenticated: 0, accessCode: null });\r\n                                                        }}>\r\n                                                            Sign Out\r\n                                                        </DropdownItem>\r\n                                                    </>\r\n                                                );\r\n                                    })()\r\n                                }\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        <Toggle checked={this.state.theme === \"light\"} onToggle={(checked, event) => {\r\n                            let layoutCopy = {...this.state.layout};\r\n                            layoutCopy.plot_bgcolor = checked? \"#ffffff\" : \"#222222\";\r\n                            layoutCopy.paper_bgcolor = checked? \"#ffffff\" : \"#222222\";\r\n                            layoutCopy.font.color = checked? \"#000000\" : \"#ffffff\";\r\n                            this.setState({ theme: checked? \"light\" : \"dark\", layout: layoutCopy, graph_revision: this.state.graph_revision + 1 }, () => this.refs.canvasComponent.updateBgColor());\r\n                        }}/>\r\n                    </Nav>\r\n                </Navbar>\r\n                <div\r\n                    style={{\r\n                        width: \"100vw\",\r\n                        height: window.innerHeight - 62,\r\n                        position: \"absolute\",\r\n                        bottom: 0,\r\n                        left: 0\r\n                    }}\r\n                >\r\n                    <div \r\n                        className={`ag-theme-${(this.state.theme === \"dark\")? \"dark\": \"balham\"} ag-grid`}\r\n                        style={{ \r\n                            width: '60vw',\r\n                            position: \"absolute\",\r\n                            bottom: 0,\r\n                            left: 0,\r\n                            top: 0\r\n                        }}\r\n                        >\r\n                        <AgGridReact\r\n                            enableSorting={true}\r\n                            enableFilter={true}\r\n                            rowSelection=\"multiple\"\r\n                            rowDragManaged={true}\r\n                            columnDefs={this.state.columnDefs}\r\n                            rowData={this.state.data}\r\n                            animateRows={true}\r\n                            enableCellChangeFlash={true}\r\n                            getRowNodeId={ data => data.hostname }\r\n                            onGridReady={\r\n                                params => {\r\n                                    this.gridApi = params.api;\r\n                                    this.columnApi = params.columnApi;\r\n                                }\r\n                            }\r\n                            onRowSelected={\r\n                                e => {\r\n                                    let shouldRun = false;\r\n                                    let selectedData = this.gridApi.getSelectedRows();\r\n                                    for(let d of selectedData)\r\n                                    {\r\n                                        if(d.hostname === e.data.hostname)\r\n                                            shouldRun = true;\r\n                                    }\r\n                                    if(shouldRun)\r\n                                    {\r\n                                        // eslint-disable-next-line\r\n                                        this.refs.canvasComponent.player.x = this.refs.canvasComponent.servers[e.data.hostname].x + this.refs.canvasComponent.servers[e.data.hostname].width/2;\r\n                                        // eslint-disable-next-line\r\n                                        this.refs.canvasComponent.player.y = this.refs.canvasComponent.servers[e.data.hostname].y + this.refs.canvasComponent.servers[e.data.hostname].height/2;\r\n                                        playerX = this.refs.canvasComponent.player.x;\r\n                                        playerY = this.refs.canvasComponent.player.y;\r\n                                        this.setState({ dataIndex: this.getIndexByHostname(e.data.hostname), graph_revision: this.state.graph_revision+1 });\r\n                                    }\r\n                                    else\r\n                                        this.setState({graph_revision: this.state.graph_revision+1});\r\n                                }\r\n                            }\r\n                            onCellEditingStopped={\r\n                                event => {\r\n                                    this.setState({graph_revision:this.state.graph_revision+1});\r\n                                    this.refs.canvasComponent.updateData(event.data);\r\n                                }\r\n                            }\r\n                            >\r\n                        </AgGridReact>\r\n                    </div>\r\n                    <div>\r\n                        <div\r\n                            style={{\r\n                                position: \"absolute\",\r\n                                width:\"40vw\",\r\n                                height: (window.innerHeight - 62) / 2.0,\r\n                                bottom: 0,\r\n                                right: 0,\r\n                            }}\r\n                            className=\"Graph\"\r\n                            >\r\n                            <Plot\r\n                                revision={this.state.graph_revision}\r\n                                data={this.createGraphData((this.gridApi && this.gridApi.getSelectedRows().length > 0)? this.gridApi.getSelectedRows() : this.state.data)}\r\n                                responsive={true}\r\n                                style={{ \r\n                                    position: \"absolute\",\r\n                                    top: 0,\r\n                                    bottom: 0,\r\n                                    left: 0,\r\n                                    right: 0,\r\n                                    userSelect: \"none\"\r\n                                }}\r\n                                ref=\"plot\"\r\n                                layout={ this.state.layout }\r\n                                config={{ scrollZoom: true, displaylogo: false }}\r\n                            />\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                position: \"absolute\",\r\n                                width:\"40vw\",\r\n                                height:(window.innerHeight - 62) / 2.0,\r\n                                top: 0,\r\n                                right: 0\r\n                            }}\r\n                            className=\"Canvas\"\r\n                            >\r\n                            <Canvas \r\n                                width={`${0.4*document.documentElement.clientWidth}px`}\r\n                                height={(window.innerHeight - 62) / 2.0}\r\n                                backgroundColor=\"green\"\r\n                                data={this.state.data}\r\n                                ref=\"canvasComponent\"\r\n                                destroyedServer={this.destroyedServer}\r\n                                theme={this.state.theme}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.dataEditorIsOpen}>\r\n                    <ModalHeader>Server Editor</ModalHeader>\r\n                    <Form onSubmit={(e) =>\r\n                    {\r\n                        e.preventDefault();\r\n\r\n                        let hostname = document.getElementById(\"edit_hostname\").value;\r\n                        let area = document.getElementById(\"edit_area\").value;\r\n                        let version = document.getElementById(\"edit_version\").value;\r\n                        let uptime = document.getElementById(\"edit_uptime\").value;\r\n\r\n                        let obj = {\r\n                            hostname: hostname,\r\n                            area: area,\r\n                            version: version,\r\n                            uptime: uptime\r\n                        }\r\n\r\n                        let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n                        if(this.getIndexByHostname(hostname) >= 0)\r\n                            dataCopy[this.getIndexByHostname(hostname)] = obj;\r\n                        else\r\n                        {\r\n                            dataCopy.push(obj);\r\n                            this.refs.canvasComponent.addServer(obj);\r\n                        }\r\n                        this.setState({ data: dataCopy, dataEditorIsOpen: false });\r\n                        this.gridApi.refreshCells();\r\n                    }}>\r\n                        <ModalBody>\r\n                            <FormGroup>\r\n                                <Label>Hostname</Label>\r\n                                <Input type=\"text\" id=\"edit_hostname\" defaultValue={(this.state.dataIndex >= 0 && this.state.data[this.state.dataIndex])? this.state.data[this.state.dataIndex].hostname: \"\"}></Input>                   \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Area</Label>\r\n                                <Input type=\"text\" id=\"edit_area\" defaultValue={(this.state.dataIndex >= 0 && this.state.data[this.state.dataIndex])? this.state.data[this.state.dataIndex].area: \"\"}></Input>                                \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Version</Label>\r\n                                <Input type=\"text\" id=\"edit_version\" defaultValue={(this.state.dataIndex >= 0 && this.state.data[this.state.dataIndex])? this.state.data[this.state.dataIndex].version: \"\"}></Input>                                \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Uptime</Label>\r\n                                <Input type=\"text\" id=\"edit_uptime\" defaultValue={(this.state.dataIndex >= 0 && this.state.data[this.state.dataIndex])? this.state.data[this.state.dataIndex].uptime: \"\"}></Input>                                \r\n                            </FormGroup>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ dataEditorIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"submit\" color=\"dark\">Edit</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.dataRemoverIsOpen}>\r\n                    <ModalHeader>Delete Server</ModalHeader>\r\n                    <Form onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n                        let hostname = document.getElementById(\"edit_hostname\").value;\r\n                        if(this.getIndexByHostname(hostname) >= 0)\r\n                        {\r\n                            dataCopy.splice(this.getIndexByHostname(hostname), 1);\r\n                            this.refs.canvasComponent.deleteServer(hostname);\r\n                        }\r\n                        this.setState({ data: dataCopy, dataRemoverIsOpen: false });\r\n                    }}>\r\n                        <ModalBody>\r\n                            <FormGroup>\r\n                                <Label>Hostname</Label>\r\n                                <Input type=\"text\" id=\"edit_hostname\" defaultValue={(this.state.dataIndex >= 0 && this.state.data[this.state.dataIndex])? this.state.data[this.state.dataIndex].hostname: \"\"}></Input>                   \r\n                            </FormGroup>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ dataRemoverIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"submit\" color=\"danger\">Delete</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.fieldEditerIsOpen}>\r\n                    <ModalHeader>Field Editor</ModalHeader>\r\n                    <Form onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n                        let hostnames = document.getElementById(\"edit_hostname\").value.replace(/ /g, \"\").split(\",\");\r\n                        let key = document.getElementById(\"edit_key\").value.toLowerCase();\r\n                        let value = document.getElementById(\"edit_value\").value;\r\n                        if(key === \"hostname\")\r\n                            alert(\"Cannot change hostname\");\r\n                        else\r\n                            for(let hostname of hostnames)\r\n                            {\r\n                                dataCopy[this.getIndexByHostname(hostname)][key] = value;\r\n                                this.refs.canvasComponent.updateData(dataCopy[this.getIndexByHostname(hostname)]);\r\n                            }\r\n                        this.setState({ data: dataCopy, fieldEditerIsOpen: false, graph_revision: this.state.graph_revision + 1 });\r\n                        this.gridApi.refreshCells();\r\n                    }}>\r\n                        <ModalBody>\r\n                            <FormGroup>\r\n                                <Label>Hostname</Label>\r\n                                <Input type=\"text\" id=\"edit_hostname\" defaultValue={(() => {\r\n                                    if(this.gridApi && this.gridApi.getSelectedRows().length > 0)\r\n                                    {\r\n                                        let arr = [];\r\n                                        for(let obj of this.gridApi.getSelectedRows())\r\n                                        {\r\n                                            arr.push(obj.hostname);\r\n                                        }\r\n                                        return arr.join(\", \");\r\n                                    }\r\n                                    return \"\";\r\n                                })()}></Input>                   \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Field Name</Label>\r\n                                <Input type=\"text\" id=\"edit_key\"></Input>                   \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Value</Label>\r\n                                <Input type=\"text\" id=\"edit_value\"></Input>                   \r\n                            </FormGroup>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ fieldEditerIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"submit\" color=\"dark\">Edit</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.fieldRemoverIsOpen}>\r\n                    <ModalHeader>Field Remover</ModalHeader>\r\n                    <Form onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        let dataCopy = (this.state.data)? [...this.state.data]: [];\r\n                        let hostnames = document.getElementById(\"edit_hostname\").value.replace(/ /g, \"\").split(\",\");\r\n                        let key = document.getElementById(\"edit_key\").value.toLowerCase();\r\n                        if(key === \"hostname\")\r\n                            alert(\"Cannot change hostname\");\r\n                        else\r\n                            for(let hostname of hostnames)\r\n                            {\r\n                                dataCopy[this.getIndexByHostname(hostname)][key] = \"\";\r\n                                this.refs.canvasComponent.updateData(dataCopy[this.getIndexByHostname(hostname)]);\r\n                            }\r\n                        this.setState({ data: dataCopy, fieldRemoverIsOpen: false, graph_revision: this.state.graph_revision + 1 });\r\n                        this.gridApi.refreshCells();\r\n                    }}>\r\n                        <ModalBody>\r\n                            <FormGroup>\r\n                                <Label>Hostname</Label>\r\n                                <Input type=\"text\" id=\"edit_hostname\" defaultValue={(() => {\r\n                                    if(this.gridApi && this.gridApi.getSelectedRows().length > 0)\r\n                                    {\r\n                                        let arr = [];\r\n                                        for(let obj of this.gridApi.getSelectedRows())\r\n                                        {\r\n                                            arr.push(obj.hostname);\r\n                                        }\r\n                                        return arr.join(\", \");\r\n                                    }\r\n                                    return \"\";\r\n                                })()}></Input>                   \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Field Name</Label>\r\n                                <Input type=\"text\" id=\"edit_key\"></Input>                   \r\n                            </FormGroup>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ fieldRemoverIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"submit\" color=\"danger\">Remove</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.selectorIsOpen}>\r\n                    <ModalHeader>Selector</ModalHeader>\r\n                    <Form onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        this.gridApi.deselectAll();\r\n                        if(this.state.selectorTab === \"hostname\")\r\n                        {\r\n                            let hostnames = document.getElementById(\"edit_hostname\").value.replace(/ /g, \"\").split(\",\");\r\n                            this.gridApi.forEachNode(\r\n                                node => {\r\n                                    if(hostnames.includes(node.data.hostname))\r\n                                    {\r\n                                        node.setSelected(true);\r\n                                    }\r\n                                }\r\n                            );\r\n                        }\r\n                        else\r\n                        {\r\n                            let expression = document.getElementById(\"edit_expression\").value;\r\n                            try {\r\n                                this.gridApi.forEachNode(\r\n                                    node => {\r\n                                        let replacedExpression = expression.replace(/{hostname}/g, '\"'+node.data.hostname+'\"').replace(/{area}/g, '\"'+node.data.area+'\"').replace(/{version}/g, node.data.version).replace(/{uptime}/g, '\"'+node.data.uptime+'\"');\r\n                                        // eslint-disable-next-line\r\n                                        if(eval(replacedExpression))\r\n                                        {\r\n                                            node.setSelected(true);\r\n                                        }\r\n                                    }    \r\n                                );\r\n                            }\r\n                            catch(e) {\r\n                                alert(\"Error in Boolean Expression!\");\r\n                            }\r\n                            this.setState({cachedExpression: expression});\r\n                        }\r\n                        this.setState({ selectorIsOpen: false });\r\n                    }}>\r\n                        <ModalBody>\r\n                            <Nav tabs>\r\n                                <NavItem>\r\n                                    <NavLink onClick={() => { this.setState({ selectorTab: \"hostname\" }) }}>By Hostname</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink onClick={() => { this.setState({ selectorTab: \"expression\" }) }}>By Expression</NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <TabContent activeTab={this.state.selectorTab}>\r\n                                <TabPane tabId=\"hostname\">\r\n                                    <FormGroup>\r\n                                        <Label>Hostname</Label>\r\n                                        <Input type=\"text\" id=\"edit_hostname\" defaultValue={(() => {\r\n                                            if(this.gridApi && this.gridApi.getSelectedRows().length > 0)\r\n                                            {\r\n                                                let arr = [];\r\n                                                for(let obj of this.gridApi.getSelectedRows())\r\n                                                {\r\n                                                    arr.push(obj.hostname);\r\n                                                }\r\n                                                return arr.join(\", \");\r\n                                            }\r\n                                            return \"\";\r\n                                        })()}></Input>                   \r\n                                    </FormGroup>\r\n                                </TabPane>\r\n                                <TabPane tabId=\"expression\">\r\n                                    <FormGroup>\r\n                                        <Label>Expression</Label>\r\n                                        <FormText>Put a boolean here that will be evaluated to determine which nodes to select. Use variables like {\"{\"}hostname{\"}\"}, {\"{\"}area{\"}\"}, {\"{\"}version{\"}\"}, and {\"{\"}uptime{\"}\"} to access the respective values.<br /><span style={{color: \"red\", fontWeight: \"bold\", fontStyle: \"underline\"}}>WARNING</span>: Selecting too many items may cause the page to lag or crash <br /> Examples: <br />{\"{\"}area{\"}\"} == '1' <br /> {\"{\"}uptime{\"} <\"} 10</FormText>\r\n                                        <Input type=\"text\" id=\"edit_expression\" defaultValue={(() => {\r\n                                            if(this.state.cachedExpression)\r\n                                            {\r\n                                                return this.state.cachedExpression;\r\n                                            }\r\n                                            if(this.gridApi && this.gridApi.getSelectedRows().length > 0)\r\n                                            {\r\n                                                let arr = [];\r\n                                                for(let obj of this.gridApi.getSelectedRows())\r\n                                                {\r\n                                                    arr.push(obj.hostname);\r\n                                                }\r\n                                                return \"['\"+arr.join(\"', '\")+\"'].includes({hostname})\";\r\n                                            }\r\n                                            return \"\";\r\n                                        })()}></Input>                   \r\n                                    </FormGroup>\r\n                                </TabPane>\r\n                            </TabContent>\r\n                            \r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ selectorIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"submit\" color=\"primary\">Select</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.joinCodeIsOpen}>\r\n                    <ModalHeader>Join Code</ModalHeader>\r\n                    <Form onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        if(this.state.authenticated === 1)\r\n                        {\r\n                            let code = document.getElementById(\"edit_code\").value;\r\n                            firebase.database().ref(\"/\"+this.state.curUser.uid).set(code);\r\n                            this.setState({ joinCodeIsOpen: false });\r\n                            firebase.database().ref(\"/\"+this.state.curUser.uid).once(\"value\", snap => {\r\n                                firebase.database().ref('/'+snap.val()).once(\"value\", snapshot => {\r\n                                    this.setState({ data: snapshot.val(), graph_revision: this.state.graph_revision + 1 });\r\n                                    this.refs.canvasComponent.recreateServers();\r\n                                });\r\n                            });\r\n                        }\r\n                        else\r\n                            alert(\"Sign In To Join\");\r\n                    }}>\r\n                        <ModalBody>\r\n                            <FormGroup>\r\n                                <Label>Code</Label>\r\n                                <FormText>Enter the code from another account (find the code in Share > Share) or create a new code to start a new data room</FormText>\r\n                                <Input type=\"text\" id=\"edit_code\" />                   \r\n                            </FormGroup>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button type=\"reset\" color=\"light\" onClick={(e) => { this.setState({ joinCodeIsOpen: false }); }}>Cancel</Button>\r\n                            <Button type=\"submit\" color=\"primary\">Join</Button>\r\n                        </ModalFooter>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal size=\"lg\" isOpen={this.state.shareCodeIsOpen}>\r\n                    <ModalHeader>Share Code</ModalHeader>\r\n                    <ModalBody>\r\n                        <FormText>Share this code to anyone who wants to share and edit the same data as you. </FormText>\r\n                        {(() => {\r\n                            if(this.state.authenticated === 1)\r\n                                return this.state.accessCode;\r\n                            else \r\n                                return \"Please Sign In To Share\";\r\n                        })()}\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button type=\"submit\" color=\"primary\" onClick={(e) => { this.setState({ shareCodeIsOpen: false }); }}>Ok</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n            </>\r\n        ) : (\r\n            <div \r\n                    className=\"ag-theme-dark ag-grid\"\r\n                    style={{ \r\n                        height: '100vh', \r\n                        width: '100vw' \r\n                    }}\r\n                    >\r\n                    <AgGridReact\r\n                        enableSorting={true}\r\n                        enableFilter={true}\r\n                        rowSelection=\"multiple\"\r\n                        rowDragManaged={true}\r\n                        columnDefs={this.state.columnDefs}\r\n                        rowData={this.state.data}\r\n                        onGridReady={\r\n                            params => {\r\n                                this.gridApi = params.api;\r\n                                this.columnApi = params.columnApi;\r\n                            }\r\n                        }>\r\n                    </AgGridReact>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/auth'\r\nimport 'firebase/database'\r\nimport config from './firebaseConfig.json'\r\nfirebase.initializeApp(config);\r\nexport default firebase","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import './bootstrap/bootstrap.min.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}